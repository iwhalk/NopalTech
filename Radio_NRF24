#include <SPI.h>
#include "nRF24L01.h"
#include "RF24.h"
#include "printf.h"

#define TAMANO_DIR 3 // Coloca el valor al tamaño de la dirección 
#define RETRIES_COUNT 15 // Número de intentos de comunicación
#define RETRIES_DELAY 250 // Timepo entre cada intento para enviar datos
#define CANALES 126 // Número de canales a utilizar
#define REPS_SCAN 50 // Número de repeticiones al escanear el canal
#define VELOCIDAD_DATA RF24_2MBPS // Velocidad de datos 
#define BYTES_ENVIAR 4 // Máximo de bytes a enviar

RF24 NRF24 (9,10); //Inicializa chip enable y chip select
const uint32 Pipes[2]={0xFFFFA0, 0xFFFFB0}; // Direcciones de tuberías

void Configuracion()
{
    const int Interfencia[CANALES]; // Índice de interferencia
    const byte Canal_Actual; // Variable conde se guarda el canal actual de comunicación

    NRF24.setAddressWidth(TAMANO_DIR); // Configura el tamaño al valor de elección (linea 6)
    //NRF24.setRetries(RETRIES_DELAY, RETRIES_COUNT); // Configura la velocidad de cada uno de los intentos y cuantos intentos serán
    //NRF24.setAutoAck(true); // Activa el ack (Confirmación de respuesta) Activado por default
    //NRF24.enableAckPayload(); // Permite variar la carga de datos a enviar
    //NRF24.setPayLoadSize(BYTES_ENVIAR); // Configura el máximo de bytes a enviar
    NRF24.setPALevel(RF24_PA_MAX); // Configura la potencia de transmición al máximo
    //NRF24.setDataRate(VELOCIDAD_DATA); // Configura la velocidad de datos
   // memset(Interfencia, 0, sizeof(Interferencia)); // Limpia los valores de interfencia 
    
    NRF24.setChannel(1); // Selección el canal
    //Canal_Actual=NRF24.getChannel(); // Obtiene el canal de configuración actual
    Serial.print("Este es el canal actual: "); // Imprime el canal
    Serial.println(Canal_Actual); // Imprime el canal
    
    NRF24.begin(); // Inicia el módulo
    
    NRF24.openWritingPipe(Pipes[1]); // Abre la dirección de la tubería para comenzar a escribir
    NRF24.openReadingPipe(1,Pipes[0]); // Abre el pipe para comenzar aleer


    /*while (REPS_SCAN--)
    {
        int i = CANALES;

        while (i--)
        {
            NRF24.setChannel(i); // Selección el canal
            NRF24.startListening();  // Escucha por un momento
            delayMicroseconds(128);
            NRF24.stopListening(); // Deja de escuchar
            
            if ( NRF24.testCarrier()) // Tenemos o no interfencia en el canal
            {
                ++Interfencia[i]; // Agrega 1 a la interfencia 
            }
        }
    }*/
}


Iniciar_Control_Remoto(){
  
  if(NRF24.failureDetected){ //NRF24.failureDetected detecta un fallo en las conexiones Fisicas del NRF24
       NRF24.failureDetected = false; //Reinica el valor del .failureDetected a Negativo o falso
        delay(250);
        Serial.println("NRF24 Fallando,Reiniciando"); 
       Configuracion();//Se introduce nuevamente la configuracion Inicial  
  }
  
}


Transmitir_Control_Remoto(){
        NRF24.stopListening(); // Deja de escuchar para empezar a Hablar
         
}

Leer_Control_Remoto()
{
     NRF24.startListening(); // Empieza a escuchar
     while (  radio.available() )
}

void steup()
{
  Configuracion();
  Iniciar_Control_Remoto();
}

void loop()
{

}
